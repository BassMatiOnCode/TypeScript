<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2022-02-09" editor="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2022-09-14" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2022-09-14" />
<meta name="version" content="1" />
<meta name="categories" content="Programming > Language > TypeScript" />
<meta name="tags" content="TypeScript, introduction, tutorial." />
<meta name="description" content='<i>JavaScript</i> is a very successful programming language and has been around since the early days of the WWW. So, why another language that sits "on top" of JavaScript?' />

<link rel="stylesheet" href="/inc/page.css" />
 
<title>TypeScript</title>

</head><body><header id="page-header"><object data="title.svg" type="image/svg+xml" style="height : 100% ; margin-left : 160px"></object></header><div id="main-toolbar"></div><main id="page-content">

<h1>TypeScript</h1>

<p id="page-abstract"></p>

<p>JavaScript has a very powerful and flexible type system with a lot of freedom, but it is an interpreter language. Type incompatibilities cannot be detected until the script is actually executed. There are no static design-time type checks as in other compiled languages. This shortcoming tends to get in the way of large projects and increases development costs. TypeScript solves this gap with a compiler that produces pure JavaScript at the output.</p>

<p>The programmer actually writes JavaScript code, decorated with additional TypeScript annotations, which are evaluated by the compiler and then <em>removed</em> from the output.</p>

<p>But there are more benefits: Editors or IDEs can exploit the TypeScript language service to find type incompatibilities while editing, suggest correct spelling if names are misspelled, and suggest object member names when a member selector operator (the dot .) was typed after an object name.</p>

<p>This tutorial will show you how to integrate a TypeScript compiler into your development workflow and how to use alternative script engines that directly or indirectly support TypeScript as a programming language.</p>

<p>A note ahead: You should be at least a little bit familiar with JavaScript, otherwise some constructs won't make much sense! Additionally, you should be somewhat familiar with the command line (execute commands, change directory, list files and directories, type the file contents).</p>

</main><footer id="page-footer"></footer><script type="module" src="/inc/page.js" ></script></body></html>